"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
PROJECT_ROOT = os.path.realpath(os.path.dirname(__file__))

MEDIA_ROOT = os.path.join(PROJECT_ROOT, 'media')
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+48r!^&xwppfki0%8+3+x(x8dqjtov(m9gwi!w0avr35s5-^rd'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'core',
    'django_filters',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
]

AUTH_USER_MODEL = 'core.User'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
    }
}


AUTHENTICATION_BACKENDS = [
    'core.auth_backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]


REST_FRAMEWORK = {
    # authentication configuration (JWT)
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),


  


    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60), 
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  
    
    # throttling configuration (Rate Limiting)
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
    ],

    # # limit users to 10 requests per minute
    # 'DEFAULT_THROTTLE_RATES': {
    #     'user': '10/minute',  
    # },
    
    # pagination configuration and show 5 items per page for pagination
        # Add filter backend globally or per view
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'core.utils.pagination.CustomPagination',
}



# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'DEBUG',
#         },
#         'django.request': {
#             'handlers': ['console'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#         'rest_framework': {
#             'handlers': ['console'],
#             'level': 'DEBUG',
#         },
#     },
# }

# email configuration 
EMAIL_BACKEND = config('EMAIL_BACKEND')
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT', cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

MEDIA_ROOT = os.path.join(BASE_DIR, "media")


STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Where your app looks for custom static files (for development use)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'backend/static'),  # only if this folder exists
]


# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST ='smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your_email@gmail.com'
# EMAIL_HOST_PASSWORD = 'your_password'
# DEFAULT_FROM_EMAIL = 'your_email@gmail.com'

# REST_AUTH_REGISTER_SERIALIZER = 'core.serializers.CustomRegisterSerializer'

# REST_AUTH_LOGIN_SERIALIZER = 'core.serializers.CustomLoginSerializer'

# REST_AUTH_PASSWORD_RESET_SERIALIZER = 'core.serializers.CustomPasswordResetSerializer'

# REST_AUTH_PASSWORD_RESET_CONFIRM_SERIALIZER = 'core.serializers.CustomPasswordResetConfirmSerializer'

# REST_AUTH_PASSWORD_CHANGE_SERIALIZER = 'core.serializers.CustomPasswordChangeSerializer'

# REST_AUTH_USER_DETAILS_SERIALIZER = 'core.serializers.CustomUserDetailsSerializer'

# REST_FRAMEWORK_EXTENSIONS = {
#     'DEFAULT_VERSIONING_CLASS':'rest_framework_extensions.versioning.URLPathVersioning',
# }

# # For JWT token expiration  
# SIMPLE_JWT_TOKEN_LIFETIME = timedelta(days=1)

# # For JWT token refreshing
# SIMPLE_JWT_REFRESH_TOKEN_LIFETIME = timedelta(days=7)

# # For JWT token blacklisting
# SIMPLE_JWT_BLACKLIST_AFTER_ROTATION = True

# SIMPLE_JWT_BLACKLIST_TOKEN_CHECKS = [
#     'rest_framework_simplejwt.token_blacklist.tokens.AccessTokenBlacklistTokenCheck',
#     'rest_framework_simplejwt.token_blacklist.tokens.RefreshTokenBlacklistTokenCheck',
# ]


# # For JWT token expiration and refreshing
# SIMPLE_JWT_ALGORITHM = 'HS256'

# SIMPLE_JWT_SIGNING_KEY = SECRET_KEY

# SIMPLE_JWT_VERIFYING_KEY = SECRET_KEY

# SIMPLE_JWT_AUDIENCE = None

# SIMPLE_JWT_ISSUER = None

# # For JWT token blacklisting
# SIMPLE_JWT_AUTH_HEADER_PREFIX = 'Bearer'

# SIMPLE_JWT_AUTH_COOKIE = None

# # For JWT token expiration and refreshing
# SIMPLE_JWT_ALLOW_REFRESH = True

# SIMPLE_JWT_ALWAYS_UPDATE_TOKENS = True

# # For JWT token expiration and refreshing
# SIMPLE_JWT_USER_ID_FIELD = 'id'

# # For JWT token expiration and refreshing
# SIMPLE_JWT_USER_ALGORITHM = 'HS256'

# # For JWT token expiration and refreshing
# SIMPLE_JWT_AUTH_TOKEN_CLASSES = ('rest_framework_simplejwt.tokens.AccessToken',)

# # For JWT token expiration and refreshing
# SIMPLE_JWT_REFRESH_TOKEN_CLASSES = ('rest_framework_simplejwt.tokens.RefreshToken',)

# # For JWT token expiration and refreshing
# SIMPLE_JWT_JTI_CLAIM = 'jti'

# # For JWT token expiration and refreshing
# SIMPLE_JWT_SLIDING_TOKEN_REFRESH_EXP_CLAIM = 'exp'

# # For JWT token expiration and refreshing
# SIMPLE_JWT_SLIDING_TOKEN_LIFETIME = timedelta(days=1)

# # For JWT token expiration and refreshing
# SIMPLE_JWT_SLIDING_TOKEN_REFRESH_LIFETIME = timedelta(days=7)

# # For JWT token expiration and refreshing
# SIMPLE_JWT_SLIDING_TOKEN_USE_REFRESH_TOKEN = True

# # For JWT token expiration and refreshing
# SIMPLE_JWT_TOKEN_TYPE_CLAIM = 'type'

# # For JWT token expiration and refreshing
# SIMPLE_JWT_TOKEN_TYPE = 'Bearer'

# # For JWT token expiration and refreshing
# SIMPLE_JWT_USER_ID_CLAIM = 'user_id'

# # For JWT token expiration and refreshing
# SIMPLE_JWT_AUTH_HEADER_TYPES = ('JWT',)

# # For JWT token expiration and refreshing
# SIMPLE_JWT_AUTH_COOKIE_NAME = 'access_token'

# # For JWT token expiration and refreshing
# SIMPLE_JWT_AUTH_COOKIE_PATH = '/'

# # For JWT token expiration and refreshing
# SIMPLE_JWT_AUTH_COOKIE_SECURE = False

# # For JWT token expiration and refreshing
# SIMPLE_JWT_AUTH_COOKIE_HTTPONLY = True
