
THIS IS FOR DOCURE FILE WHEN WE ARE USING KAFKA AND ZOOKEEPER

version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"  # <- expose to host
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092




COMMANDS FOR RUN THE RUN DOCKER AND KAFKA AND ZOOKEEPER


‚úÖ Great! Your Kafka and Zookeeper services are now up and running inside Docker containers:

employee-management_zookeeper_1: ‚úÖ started

employee-management_kafka_1: ‚úÖ started 



CONTAINER ID   IMAGE                          ...   NAMES
abc123456789   confluentinc/cp-kafka:latest   ...   employee-management_kafka_1
xyz987654321   confluentinc/cp-zookeeper:latest ... employee-management_zookeeper_1


Restart the containers:
docker-compose down
docker-compose up -d




Now that Kafka is running, you should be able to start your Kafka consumer without seeing the previous Connection refused error.

From your virtual environment (venv), run  Retry your consumer::
python backend/manage.py run_kafka_consumer





telnet localhost 9092



1. Check Kafka container logs
Run this to see if Kafka is starting up or encountering errors:
docker-compose logs kafka




You're looking for a line like:

scss

INFO [KafkaServer id=1] started (kafka.server.KafkaServer)
If you don‚Äôt see that, the Kafka service may still be starting or may have failed.




Save and use the cleaned docker-compose.yml.

Run:

docker-compose down -v
docker-compose up -d --build

Check Kafka container logs 
docker-compose logs kafka



atlantick-solutions@atlantick-solutions-Vostro-3030S:~/Desktop/Ankit Mishra/Employee-Management$ python backend/manage.py run_kafka_consumer
üì° Running Kafka notification consumer...

atlantick-solutions@atlantick-solutions-Vostro-3030S:~/Desktop/Ankit Mishra/Employee-Management$ docker exec -it employee-management_kafka_1 bash
[appuser@6b38ccfb5107 ~]$ kafka-topics --create \
>   --topic notifications \
>   --bootstrap-server localhost:9092 \
>   --replication-factor 1 \
>   --partitions 1
Created topic notifications.
[appuser@6b38ccfb5107 ~]$ 





for exit the terminal ===<<>>> exit


after running success fullyy you will see 
atlantick-solutions@atlantick-solutions-Vostro-3030S:~/Desktop/Ankit Mishra/Employee-Management$ python backend/manage.py run_kafka_consumer
üì° Running Kafka notification consumer...
üì® Subscribed to topic: notifications
‚úÖ Received message: Test message from producer







The error you're getting:

kotlin

KafkaException: KafkaError{code=UNKNOWN_TOPIC_OR_PART,val=3,str="Subscribed topic not available: employee-events: Broker: Unknown topic or partition"}
means that Kafka cannot find the topic named employee-events.

‚úÖ Here's how to resolve this:
‚úÖ 1. Verify Kafka is running
Make sure your Kafka server and Zookeeper are running:


# For Zookeeper (if required)
bin/zookeeper-server-start.sh config/zookeeper.properties

# For Kafka
bin/kafka-server-start.sh config/server.properties
‚úÖ 2. Check existing topics
Run this to see the list of available topics:


bin/kafka-topics.sh --bootstrap-server localhost:9092 --list
If you don‚Äôt see employee-events or notifications, that‚Äôs the issue.

‚úÖ 3. Create the missing topics
Manually create the missing topics like so:


# Create employee-events topic
bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic employee-events --partitions 1 --replication-factor 1

# Create notifications topic
bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic notifications --partitions 1 --replication-factor 1
Then try running your command again:


python backend/manage.py run_kafka_consumer
üîÅ Optional: Auto-create topics
If you want Kafka to auto-create topics when they don‚Äôt exist, make sure the Kafka config (server.properties) has:

properties

auto.create.topics.enable=true
Then restart Kafka.





‚úÖ Here's how to fix it now:
Step 1: Go to your Kafka directory
Make sure you're in the Kafka folder you extracted (e.g., kafka_2.13-3.7.0):


cd ~/kafka_2.13-3.7.0
Step 2: Create the missing topics manually

bin/kafka-topics.sh --create \
  --topic employee-events \
  --bootstrap-server localhost:9092 \
  --partitions 1 \
  --replication-factor 1
And the same for notifications:


bin/kafka-topics.sh --create \
  --topic notifications \
  --bootstrap-server localhost:9092 \
  --partitions 1 \
  --replication-factor 1
Step 3: Confirm the topics were created

bin/kafka-topics.sh --list --bootstrap-server localhost:9092
You should see:

matlab

employee-events
notifications
Step 4: Run your consumer again

python backend/manage.py run_kafka_consumer
It should now connect and stay running. ‚úÖ





‚úÖ Step 1: Re-download and extract Kafka
Run this in your terminal:
 open two terminal one kafka and another one is for zookeepar 
cd ~
this command for download kafka ===::::: wget https://archive.apache.org/dist/kafka/3.7.0/kafka_2.13-3.7.0.tgz
tar -xzf kafka_2.13-3.7.0.tgz
cd kafka_2.13-3.7.0 


‚úÖ Step 2: Start Zookeeper and Kafka
In two separate terminals:

Terminal 1 ‚Äì Zookeeper:

bin/zookeeper-server-start.sh config/zookeeper.properties
Terminal 2 ‚Äì Kafka server:

bin/kafka-server-start.sh config/server.properties




‚úÖ Step 3: Create the required Kafka topics
Once Kafka is running, in a third terminal, run:

first command : 1- cd ~
first command : 2- tar -xzf kafka_2.13-3.7.0.tgz
first command : 3- cd kafka_2.13-3.7.0
first command : 4- bin/kafka-topics.sh --create \
  --topic employee-events \
  --bootstrap-server localhost:9092 \
  --partitions 1 \
  --replication-factor 1
Created topic employee-events.



‚úÖ Step 4: Verify the topics
Check if the topics were created:


bin/kafka-topics.sh --list --bootstrap-server localhost:9092
You should see:

employee-events
notifications



‚úÖ Final Step: Run Your Kafka Consumer
Now, go back to your Django project terminal and run:

python backend/manage.py run_kafka_consumer






Great ‚Äî your Kafka topics are all set! Here's a summary of useful Kafka commands you can use now for topic management and testing:

‚úÖ 1. List all topics

bin/kafka-topics.sh --list --bootstrap-server localhost:9092
‚úÖ 2. Create a topic

bin/kafka-topics.sh --create \
  --topic your-topic-name \
  --bootstrap-server localhost:9092 \
  --partitions 1 \
  --replication-factor 1
‚úÖ 3. Describe a topic (check config & partitions)

bin/kafka-topics.sh --describe \
  --topic employee-events \
  --bootstrap-server localhost:9092
‚úÖ 4. Produce a test message to a topic

bin/kafka-console-producer.sh \
  --topic employee-events \
  --bootstrap-server localhost:9092
‚û°Ô∏è After running the above, type your JSON or string message and press Enter. Example:

json

{"type": "employee_created", "email": "test@example.com", "name": "Test User", "company": "Atlantick", "password": "Test@123"}
‚úÖ 5. Consume messages from a topic

bin/kafka-console-consumer.sh \
  --topic employee-events \
  --bootstrap-server localhost:9092 \
  --from-beginning
This will let you watch all messages coming into the topic ‚Äî great for testing.

Let me know if you want to clean/reset topics or automate testing messages via script.






run celery 
celery -A backend worker -l info





‚úÖ Fix Steps
1. üü¢ Start Zookeeper (if you're not using KRaft mode)
Run this in a new terminal:


bin/zookeeper-server-start.sh config/zookeeper.properties
Wait for it to say:
INFO binding to port /0.0.0.0:2181
Then open another terminal and proceed.

2. üü¢ Start Kafka Server
Once Zookeeper is running, start Kafka:


bin/kafka-server-start.sh config/server.properties
Wait until it says something like:
INFO [KafkaServer id=0] started (kafka.server.KafkaServer)

3. üõ†Ô∏è Create Your Topics
Now you can safely create your topics:


bin/kafka-topics.sh --create \
  --topic employee-events \
  --bootstrap-server localhost:9092 \
  --partitions 1 \
  --replication-factor 1
And:


bin/kafka-topics.sh --create \
  --topic notifications \
  --bootstrap-server localhost:9092 \
  --partitions 1 \
  --replication-factor 1
4. üèÉ‚Äç‚ôÇÔ∏è Run Your Kafka Consumers
With topics created and brokers running, now run:


python backend/manage.py run_employee_consumer
python backend/manage.py run_kafka_consumer
They should subscribe successfully without errors.

üß† Optional: Are You Using Kafka 3.3+ with KRaft Mode?
If you're using KRaft mode (Kafka without Zookeeper), then Zookeeper should not be started ‚Äî but in that case, your Kafka config must point to a meta.properties file and have process.roles=broker,controller set. Let me know if you're using this mode, and I‚Äôll guide you accordingly.



3. üõ†Ô∏è Create Your Topics
Now you can safely create your topics:


bin/kafka-topics.sh --create \
  --topic employee-events \
  --bootstrap-server localhost:9092 \
  --partitions 1 \
  --replication-factor 1
And:


bin/kafka-topics.sh --create \
  --topic notifications \
  --bootstrap-server localhost:9092 \
  --partitions 1 \
  --replication-factor 1
4. üèÉ‚Äç‚ôÇÔ∏è Run Your Kafka Consumers
With topics created and brokers running, now run:


python backend/manage.py run_employee_consumer
python backend/manage.py run_kafka_consumer
They should subscribe successfully without errors.

